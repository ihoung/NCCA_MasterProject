<fragment  uiName="ETS_ShaderDiffuse" name="ETS_ShaderDiffuse" type="plumbing" class="ShadeFragment" version="1.0" feature_level="30" >
    <description>
<![CDATA[
Calculate shading shape for each edit.]]>
    </description>
    <properties>
        <float3  name="Pw" flags="isRequirementOnly,varyingInputParam" />
        <float4x4  name="editLightSpace" size="50" />
        <float3  name="editWorldPosition" size="50" />
        <float  name="anisotropy" size="50" />
        <float  name="sharpness" size="50" />
        <float  name="bend" size="50" />
        <float  name="bulge" size="50" />
        <float  name="rotation" size="50" />
        <float  name="normalSmooth" size="50" />
        <float  name="intensityGain" size="50" />
        <float  name="softness" size="50" />
        <int name="editNum" />
    </properties>
    <values>
        <!-- <float  name="anisotropy" value="0.0" />
        <float  name="sharpness" value="0.0" />
        <float  name="bend" value="0.0" />
        <float  name="bulge" value="0.0" />
        <float  name="rotation" value="0.0" />
        <float  name="normalSmooth" value="0.0" />
        <float  name="intensityGain" value="0.0" />
        <float  name="softness" value="0.1" /> -->
        <int name="editNum" value="0" />
    </values>
    <outputs>
        <float  name="output" />
    </outputs>
    <parametershare>
    </parametershare>
    <implementation >
    <implementation render="OGSRenderer" language="Cg" lang_version="2.100000" >
        <function_name val="ETSShaderDiffuse" />
        <source>
            <![CDATA[
float2x2 rot2D(float rad)
{
    return float2x2(cos(rad), -sin(rad), sin(rad), cos(rad));
}
float editDiffuse(
    float3 pw,
    float4x4 els,
    float3 ewp,
    float a,
    float s,
    float wy,
    float wx,
    float rot,
    float ns
)
{
    float PI = radians(180);

    float3 lsVec = mul(normalize(pw-ewp), float3x3(els));
    lsVec = normalize(lsVec);
    float lsR = 1.0f / cos(lsVec.z);
    float lsTh = 1.0f / tan(lsVec.y / lsVec.x);
    float pu = lsR * cos(lsTh);
    float pv = lsR * sin(lsTh);
    float2 pUV = float2(pu, pv);

    float2 w = float(wy, wx);
    float thw = 10.0f * dot(w, mul(pUV, rot2D(rot)));
    float2 UVw = w + mul(mul(pUV, rot2D(rot)) - w, rot2D(thw));
    float Iw = exp(-a * exp2(UVw.x) - 1.0f / a * pow(abs(UVw.y), 2-s));

    float cTh = 1.0f;
    if (thw <= -PI/2.0f || thw >= PI/2.0f) cTh = 0.0f;
}
float ETSShaderDiffuse(
    float4x4 editLightSpace[50],
    float3 editWorldPosition[50],
    float anisotropy[50],
    float sharpness[50],
    float bend[50],
    float bulge[50],
    float rotation[50],
    float normalSmooth[50],
    float intensityGain[50],
    float softness[50],
    int editNum
)
{
    float res = 0.0f;
    for (int i=0;i<editNum;i++)
    {
        res += sharpness[i];
    }
    res = res / (float)editNum;
    return res;
}
            ]]>
        </source>
    </implementation>
    <implementation render="OGSRenderer" language="HLSL" lang_version="11.000000" >
        <function_name val="ETSShaderDiffuse" />
        <source>
            <![CDATA[
float ETSShaderDiffuse(
    float4x4 editLightSpace[50],
    float3 editWorldPosition[50],
    float anisotropy[50],
    float sharpness[50],
    float bend[50],
    float bulge[50],
    float rotation[50],
    float normalSmooth[50],
    float intensityGain[50],
    float softness[50],
    int editNum
)
{
    float res = 0.0f;
    for (int i=0;i<editNum;i++)
    {
        res += sharpness[i];
    }
    res = res / (float)editNum;
    return res;
}
            ]]>
        </source>
    </implementation>
    <implementation render="OGSRenderer" language="GLSL" lang_version="3.000000" >
        <function_name val="ETSShaderDiffuse" />
        <source>
            <![CDATA[
float ETSShaderDiffuse(
    mat4 editLightSpace[50],
    vec3 editWorldPosition[50],
    float anisotropy[50],
    float sharpness[50],
    float bend[50],
    float bulge[50],
    float rotation[50],
    float normalSmooth[50],
    float intensityGain[50],
    float softness[50],
    int editNum
)
{
    float res = 0.0f;
    for (int i=0;i<editNum;i++)
    {
        res += sharpness[i];
    }
    res = res / (float)editNum;
    return res;
}
            ]]>
        </source>
    </implementation>
    </implementation>
</fragment>

